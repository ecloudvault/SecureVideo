package com.oscgc.securevideo.server.service.impl;import java.io.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import com.oscgc.securevideo.server.model.Video;import com.oscgc.securevideo.server.service.UploadVideoService;import com.oscgc.securevideo.server.tool.CommandUtils;import com.oscgc.securevideo.server.tool.VideoKeyReader;/** * Created by Yq on 2015/6/4. */@Servicepublic class UploadVideoServiceImpl implements UploadVideoService {        @Value("${excute.command.timeout}")    private int commandTimeOut;        @Value("${screenshot.timestamp}")    private String timestamp;        Logger logger = LoggerFactory.getLogger(UploadVideoServiceImpl.class);        public void saveFile(Video video, byte[] content) throws IOException {                BufferedOutputStream bos = null;        try {            String path = UploadVideoServiceImpl.class.getClassLoader()                                                      .getResource("")                                                      .getPath() + "upload/";                        File file = new File(path + video.getOrgiFileName()                                 + video.getFormart());            if (!file.getParentFile().exists()) {                file.getParentFile().mkdirs();            }            file.createNewFile();            bos = new BufferedOutputStream(new FileOutputStream(file));            bos.write(content);        }        catch (FileNotFoundException e) {            throw new FileNotFoundException("file not existed");        }        finally {            if (null != bos) {                bos.close();            }        }    }        public void encryptVideo(Video video) {        String rootPath = UploadVideoServiceImpl.class.getClassLoader()                                                      .getResource("")                                                      .getPath();                String videoPath = rootPath + "upload/";        logger.debug("start execute encryptvideo ");        String[] command = new String[] { "webm_crypt",                                         "-i",                                         videoPath + video.getOrgiFileName()                                                 + video.getFormart(),                                         "-o",                                         videoPath + video.getOrgiFileName()                                                 + "_enc"                                                 + video.getFormart(),                                         "-audio",                                         "true",                                         "-video",                                         "true",                                         "-audio_options",                                         "content_id=" + video.getId()                                                 + ",base_file="                                                 + videoPath                                                 + video.getId()                                                 + ".key",                                         "-video_options",                                         "content_id=" + video.getId()                                                 + ",base_file="                                                 + videoPath                                                 + video.getId()                                                 + ".key" };        logger.debug("end execute encryptvideo ");        CommandUtils.executeCommand(command, commandTimeOut);        CommandUtils.executeCommand(command, commandTimeOut);        video.setEncrypted(true);        video.setEncrptedFileName(video.getOrgiFileName() + "_enc"                                  + video.getFormart());                byte[] keyContent = new byte[0];        try {            keyContent = VideoKeyReader.readVideoKey(videoPath + video.getId()                                                     + ".key");        }        catch (IOException e) {            e.printStackTrace();        }        video.getVideoKey().setContent(keyContent);        video.getVideoKey()             .setContent4Base64(VideoKeyReader.convertBytesToBase64Url(keyContent));            }        /**     * screenShot video photo     *     * @param videoRealPath     * @param videoImgPath     */        public void screenShot(String videoRealPath, String videoImgPath) {        logger.debug("-videoRealPath-----------------------" + videoRealPath);        logger.debug("-videoImgPath-----------------------" + videoImgPath);        String[] command = new String[] { "ffmpeg",                                         "-i",                                         videoRealPath,                                         "-ss",                                         timestamp,                                         "-f",                                         "image2",                                         videoImgPath };        CommandUtils.executeCommand(command, commandTimeOut);            }}