package com.oscgc.securevideo.server.tool;import org.apache.log4j.Logger;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.URL;import javax.swing.JOptionPane;/** *copyfile or directory * * yq */public class CopyFileUtil {	public static    Logger logger = Logger.getLogger(CopyFileUtil.class);	/**	 * copy file	 *	 * @param	 *   srcFileName        prepar to copy file	 *   destFileName       to other dirctory	 * @param overlay	 *            is override file	 * @return	 */	public static boolean copyFile(String srcFileName, String destFileName,	                               boolean overlay) {		File srcFile = new File(srcFileName);		if (!srcFile.exists()) {			return false;		} else if (!srcFile.isFile()) {			logger.error("copy file faile：" + srcFileName + " is not file！");			return false;		}		// file exists		File destFile = new File(destFileName);		if (destFile.exists()) {			// allow override			if (overlay) {				// delete file				new File(destFileName).delete();			}		} else {			// dirctiontory not exists creat it			if (!destFile.getParentFile().exists()) {				if (!destFile.getParentFile().mkdirs()) {					// create dirctiontory faile					return false;				}			}		}		// copy file		int byteread = 0;		InputStream in = null;		OutputStream out = null;		try {			in = new FileInputStream(srcFile);			out = new FileOutputStream(destFile);			byte[] buffer = new byte[1024];			while ((byteread = in.read(buffer)) != -1) {				out.write(buffer, 0, byteread);			}			return true;		} catch (FileNotFoundException e) {			return false;		} catch (IOException e) {			return false;		} finally {			try {				if (out != null)					out.close();				if (in != null)					in.close();			} catch (IOException e) {				e.printStackTrace();			}		}	}	/**	 * copy dirctiontory	 *	 * @param srcDirName	 *            copy folder	 * @param destDirName	 *            to folder	 * @param overlay	 *           is override	 * @return	 */	public static boolean copyDirectory(String srcDirName, String destDirName,	                                    boolean overlay) {		File srcDir = new File(srcDirName);		if (!srcDir.exists()) {			logger.error("copy directory faile,source dir"+ srcDirName+"not exists!");			return false;		} else if (!srcDir.isDirectory()) {			logger.error("copy directory faile," + srcDirName + "is not a diretory!");			return false;		}		// if copy folder not end with "/" then add		if (!destDirName.endsWith(File.separator)) {			destDirName = destDirName + File.separator;		}		File destDir = new File(destDirName);		if (destDir.exists()) {			if (overlay) {				new File(destDirName).delete();			} else {				logger.error("copy directroy faile,"+destDirName+" is existed!");				return false;			}		} else {			logger.error("directroy not exists,"+destDirName+" prepar to creat !");			if (!destDir.mkdirs()) {				logger.error("directroy create fail");				return false;			}		}		boolean flag = true;		File[] files = srcDir.listFiles();		for (int i = 0; i < files.length; i++) {			// copy file			if (files[i].isFile()) {				flag = CopyFileUtil.copyFile(files[i].getAbsolutePath(),						destDirName + files[i].getName(), overlay);				if (!flag)					break;			} else if (files[i].isDirectory()) {				flag = CopyFileUtil.copyDirectory(files[i].getAbsolutePath(),						destDirName + files[i].getName(), overlay);				if (!flag)					break;			}		}		if (!flag) {			logger.error("copy faile!");			return false;		} else {			return true;		}	}	public static String getVideosPath(String filename,String ...args)	{		String pre=System.getProperty("user.dir");		String path=pre;		for(String arg:args)		{			path+=File.separator+arg;		}		path+=File.separator+filename;		if(path.startsWith("file"))		{			path=path.substring(5);		}		path.replace("/", File.separator);		path = path.substring(0, path.lastIndexOf(File.separator));		return path;	}	public static void main(String[] args) {		String srcDirName = "C:/tt";		String destDirName = "c:/t";		CopyFileUtil.copyDirectory(srcDirName, destDirName, true);	}}